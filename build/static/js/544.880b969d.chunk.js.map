{"version":3,"file":"static/js/544.880b969d.chunk.js","mappings":"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","sources":["component/confirmationForm.js"],"sourcesContent":["import { useRef, useState } from \"react\";\r\n\r\nimport * as PushAPI from \"@pushprotocol/restapi\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\n\r\nconst ConfirmationForm = (props) => {\r\n\r\n  const nameRef = useRef();\r\n\r\n  const desRef = useRef();\r\n\r\n  const nameN = useRef(null);\r\n  \r\n  const desc = useRef(null);\r\n \r\n\r\n  const [showConfirmation, setShowConfirmation] = useState(false);\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    switch (name) {\r\n      case \"nameN\":\r\n        nameN.current = value;\r\n        break;\r\n      case \"desc\":\r\n        desc.current = value;\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n\r\n  \r\n// async function onc(){\r\n//   const _signer= props.sig;\r\n//   const user = await PushAPI.user.get({\r\n//     account: `eip155:${props.currentAccount}`, env:'staging'});\r\n//  console.log(_signer)\r\n//  console.log(user)\r\n//  const pgpDecryptedPvtKey = await PushAPI.chat.decryptPGPKey({\r\n//   encryptedPGPPrivateKey: user.encryptedPrivateKey,\r\n//   signer: _signer,\r\n//   env:'staging'\r\n// });\r\n\r\n// const result=await PushAPI.chat.send({\r\n//   messageContent: \"Gm gm! It's me... Mario\",\r\n//   messageType: \"Text\", // can be \"Text\" | \"Image\" | \"File\" | \"GIF\"\r\n//   receiverAddress: `eip155:${id}`,\r\n//   signer: _signer,\r\n//   pgpPrivateKey: pgpDecryptedPvtKey,\r\n//   env: \"staging\",\r\n// });\r\n// console.log(\"result\",result)\r\n// }\r\n  const Chat = async () => {\r\n    \r\n    const _signer=props.sig;\r\n    \r\n    const user = await PushAPI.user.get({\r\n      account: `eip155:${props.currentAccount}`, env:'staging'});\r\n\r\n    // need to decrypt the encryptedPvtKey to pass in the api using helper function\r\n    const pgpDecryptedPvtKey = await PushAPI.chat.decryptPGPKey({\r\n      encryptedPGPPrivateKey: user.encryptedPrivateKey,\r\n      signer: _signer,\r\n      env:'staging'\r\n    });\r\n    \r\n    await PushAPI.chat.send({\r\n      messageContent: `Request to schedule meet\\nTime:${props.date}\\nName:${nameN.current}\\nDescription:${desc.current}`,\r\n      messageType: \"Text\", // can be \"Text\" | \"Image\" | \"File\" | \"GIF\"\r\n      receiverAddress: `eip155:${props.id}`,\r\n      signer: _signer,\r\n      pgpPrivateKey: pgpDecryptedPvtKey,\r\n      env: \"staging\",\r\n    });\r\n  };\r\n\r\n  const formSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (!nameN.current) {\r\n      alert(\"Name field is manfatory\");\r\n      nameRef.current.focus();\r\n      return;\r\n    }\r\n\r\n\r\n    console.log(\r\n      `name:${nameN.current} \\n date:${props.date}\\n desc:${desc.current}`\r\n    );\r\n    setShowConfirmation(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"confirmationBody\">\r\n      {!showConfirmation ? (\r\n        <form onSubmit={formSubmit}>\r\n          <h2>Enter details</h2>\r\n          <label>\r\n            Name*\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              onChange={handleChange}\r\n              name=\"nameN\"\r\n              ref={nameRef}\r\n              required\r\n            />\r\n          </label>\r\n          <br />\r\n          \r\n         \r\n          <label>\r\n            Description\r\n            <br />\r\n            <textarea\r\n              onChange={handleChange}\r\n              cols={40}\r\n              name=\"desc\"\r\n              rows={5}\r\n              ref={desRef}\r\n            />\r\n          </label>\r\n          <br />\r\n          <button className=\"formButton\" type=\"submit\" onClick={Chat}>\r\n            Schedule\r\n          </button>\r\n          <button className=\"formButton\" onClick={props.back}>\r\n            Back\r\n          </button>\r\n        </form>\r\n      ) : (\r\n        <div className=\"BookingDetail\">\r\n          <h3>Booking Details</h3>\r\n          <h4>\r\n            <strong>date</strong>:<em>{props.date}</em>\r\n          </h4>\r\n          <h4>\r\n            <strong>name</strong>:<em>{nameN.current}</em>\r\n          </h4>\r\n          {desc.current ? <h4>desc: {desc.current}</h4> : null}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfirmationForm;\r\n"],"names":["props","nameRef","useRef","desRef","nameN","desc","_useState","useState","_useState2","_slicedToArray","showConfirmation","setShowConfirmation","handleChange","event","_event$target","target","name","value","current","Chat","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_signer","user","pgpDecryptedPvtKey","wrap","_context","prev","next","sig","PushAPI","get","account","concat","currentAccount","env","sent","decryptPGPKey","encryptedPGPPrivateKey","encryptedPrivateKey","signer","send","messageContent","date","messageType","receiverAddress","id","pgpPrivateKey","stop","apply","arguments","_jsx","className","children","_jsxs","onSubmit","preventDefault","alert","focus","console","log","type","onChange","ref","required","cols","rows","onClick","back"],"sourceRoot":""}