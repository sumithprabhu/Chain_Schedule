{"version":3,"file":"static/js/9.71aa9cce.chunk.js","mappings":"oMAEA,MAmHA,EAnHkBA,IAChB,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,IACrCC,GAAeC,EAAAA,EAAAA,QAAO,MACtBC,GAAgBD,EAAAA,EAAAA,QAAO,MACvBE,EAAQ,IAAIC,MACXC,EAAmBC,IAAwBP,EAAAA,EAAAA,YAE5CQ,EAAcA,CAACC,EAAOC,KAC1BC,QAAQC,IAAI,6BACZ,IAAIC,EAAgB,GAChBC,EAAIL,GAAgB,EACpBM,EAAYL,GAAsB,GACtC,KAAQI,GAAK,GAAIA,IAAK,CACpB,IAAIE,EAAI,EACR,KAAOA,EAAI,IAAI,CACb,IAEIC,EAAU,GAFAH,EAAI,GAAM,IAAGA,IAAMA,KACnBE,EAAI,GAAM,IAAGA,IAAMA,IAEjCH,EAAcK,KAAKD,GACnBD,GAAKD,CACP,CACF,CACA,OAAOF,CAAa,EAGhBM,EAAcA,KAClBR,QAAQC,IAAI,gBACZX,EAAamB,QAAUnB,EAAamB,QAAQC,QACzCC,IAAUA,EAAKC,MAAM,KAAK,GAAKnB,EAAMoB,aAGtC3B,EAAM4B,KAAKC,YAActB,EAAMsB,WAC/B7B,EAAM4B,KAAKE,aAAevB,EAAMuB,aAIlC5B,EAAa,IAAIE,EAAamB,UAC9BQ,cAAcC,GAAS,EAGnBA,EAAWA,KACfC,YAAYX,EAAatB,EAAMa,SAA4B,IAAjBb,EAAMa,SAAmB,IAAO,GAqB5EqB,EAAAA,EAAAA,YAAU,KACRxB,IACAV,EAAM4B,KAAKC,YAActB,EAAMsB,WAC/B7B,EAAM4B,KAAKE,aAAevB,EAAMuB,WArBVK,MACtB,GAA6B,OAAzB/B,EAAamB,QAAkB,CACjCT,QAAQC,IAAIX,EAAamB,SACzB,IAAIa,EAAUzB,EAAYJ,EAAMoB,WAAY3B,EAAMa,UAClDT,EAAamB,QAAUa,EACvBJ,GACF,CACA9B,EAAa,IAAIE,EAAamB,SAAS,EAenCY,GAZgBE,MACpB,GAA8B,OAA1B/B,EAAciB,QAAkB,CAClC,IAAIa,EAAUzB,EAAY,EAAGX,EAAMa,UACnCP,EAAciB,QAAUa,CAC1B,CACAlC,EAAa,IAAII,EAAciB,SAAS,EAQpCc,GACG,KACLN,cAAcC,EAAS,IAExB,CAAChC,EAAM4B,OAEV,MAIMU,EAA2BA,KAC/B,IAAIC,EAAavC,EAAM4B,KACpBY,WACAd,MAAM,KACNe,KAAI,CAAChB,EAAMiB,EAAOC,IACH,IAAVD,EACKjB,EAECkB,EAAI,GAAKlC,IAGpBmC,KAAK,KACR5C,EAAM6C,OAAON,EAAW,EAG1B,OACEO,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,SAC3B/C,EAAUwC,KAAKhB,IACdwB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,UACEC,UACEtC,IAAuB,GAAEgB,OAAY,cAAgB,OAEvDyB,QAASA,KA1BjBxC,EAAsB,GA0BuBe,OAAM,EAAAuB,SAE1CvB,IAEFhB,IAAuB,GAAEgB,QACxBqB,EAAAA,EAAAA,KAAA,UAAQC,UAAU,cAAcG,QAASZ,EAAyBU,SAAC,YAGjE,OAbyBvB,MAgB7B,C","sources":["component/timeCard.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nconst TimeCard = (props) => {\r\n  const [timeSlice, setTimeSlice] = useState([]);\r\n  const todaydateRef = useRef(null);\r\n  const normalDateRef = useRef(null);\r\n  const today = new Date();\r\n  const [showConfirmButton, setShowConfirmButton] = useState();\r\n\r\n  const createSlice = (start, duration) => {\r\n    console.log(\"creation request received\");\r\n    let timeSliceData = [];\r\n    let i = start ? start : 0;\r\n    let sliceSize = duration ? duration : 60;\r\n    for (i; i <= 24; i++) {\r\n      let j = 0;\r\n      while (j < 60) {\r\n        let iUpdate = i < 10 ? `0${i}` : i;\r\n        let jUpdate = j < 10 ? `0${j}` : j;\r\n        let stitch = `${iUpdate}:${jUpdate}`;\r\n        timeSliceData.push(stitch);\r\n        j += sliceSize;\r\n      }\r\n    }\r\n    return timeSliceData;\r\n  };\r\n\r\n  const updateTimer = () => {\r\n    console.log(\"slot updated\");\r\n    todaydateRef.current = todaydateRef.current.filter(\r\n      (item) => +item.split(\":\")[0] > today.getHours()\r\n    );\r\n    if (\r\n      props.date.getDate() === today.getDate() &&\r\n      props.date.getMonth() === today.getMonth()\r\n    ) {\r\n      return;\r\n    }\r\n    setTimeSlice([...todaydateRef.current]);\r\n    clearInterval(interval);\r\n  };\r\n\r\n  const interval = () => {\r\n    setInterval(updateTimer, props.duration ? props.duration * 10000 : 100000);\r\n  };\r\n\r\n  const setDateForToday = () => {\r\n    if (todaydateRef.current === null) {\r\n      console.log(todaydateRef.current);\r\n      let setting = createSlice(today.getHours(), props.duration);\r\n      todaydateRef.current = setting;\r\n      interval();\r\n    }\r\n    setTimeSlice([...todaydateRef.current]);\r\n  };\r\n\r\n  const directSetDate = () => {\r\n    if (normalDateRef.current === null) {\r\n      let setting = createSlice(0, props.duration);\r\n      normalDateRef.current = setting;\r\n    }\r\n    setTimeSlice([...normalDateRef.current]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setShowConfirmButton();\r\n    props.date.getDate() === today.getDate() &&\r\n    props.date.getMonth() === today.getMonth()\r\n      ? setDateForToday()\r\n      : directSetDate();\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [props.date]);\r\n\r\n  const callSetTimeAndForward = (time) => {\r\n    setShowConfirmButton(`${time}:00`);\r\n  };\r\n\r\n  const navigateConfirmationPage = () => {\r\n    let updateDate = props.date\r\n      .toString()\r\n      .split(\" \")\r\n      .map((item, index, arr) => {\r\n        if (index !== 4) {\r\n          return item;\r\n        } else {\r\n          return (arr[4] = showConfirmButton);\r\n        }\r\n      })\r\n      .join(\" \");\r\n    props.update(updateDate);\r\n  };\r\n\r\n  return (\r\n    <div className=\"timeSliceBody\">\r\n      {timeSlice.map((item) => (\r\n        <div className=\"timeList\" key={item}>\r\n          <button\r\n            className={\r\n              showConfirmButton === `${item}:00` ? \"half marked\" : \"full\"\r\n            }\r\n            onClick={() => callSetTimeAndForward(item)}\r\n          >\r\n            {item}\r\n          </button>\r\n          {showConfirmButton === `${item}:00` ? (\r\n            <button className=\"half select\" onClick={navigateConfirmationPage}>\r\n              Confirm\r\n            </button>\r\n          ) : null}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeCard;"],"names":["props","timeSlice","setTimeSlice","useState","todaydateRef","useRef","normalDateRef","today","Date","showConfirmButton","setShowConfirmButton","createSlice","start","duration","console","log","timeSliceData","i","sliceSize","j","stitch","push","updateTimer","current","filter","item","split","getHours","date","getDate","getMonth","clearInterval","interval","setInterval","useEffect","setDateForToday","setting","directSetDate","navigateConfirmationPage","updateDate","toString","map","index","arr","join","update","_jsx","className","children","_jsxs","onClick"],"sourceRoot":""}