{"version":3,"file":"static/js/9.75631e50.chunk.js","mappings":"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","sources":["component/timeCard.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nconst TimeCard = (props) => {\r\n  const [timeSlice, setTimeSlice] = useState([]);\r\n  const todaydateRef = useRef(null);\r\n  const normalDateRef = useRef(null);\r\n  const today = new Date();\r\n  const [showConfirmButton, setShowConfirmButton] = useState();\r\n\r\n  const createSlice = (start, duration) => {\r\n    console.log(\"creation request received\");\r\n    let timeSliceData = [];\r\n    let i = start ? start : 0;\r\n    let sliceSize = duration ? duration : 60;\r\n    for (i; i <= 24; i++) {\r\n      let j = 0;\r\n      while (j < 60) {\r\n        let iUpdate = i < 10 ? `0${i}` : i;\r\n        let jUpdate = j < 10 ? `0${j}` : j;\r\n        let stitch = `${iUpdate}:${jUpdate}`;\r\n        timeSliceData.push(stitch);\r\n        j += sliceSize;\r\n      }\r\n    }\r\n    return timeSliceData;\r\n  };\r\n\r\n  const updateTimer = () => {\r\n    console.log(\"slot updated\");\r\n    todaydateRef.current = todaydateRef.current.filter(\r\n      (item) => +item.split(\":\")[0] > today.getHours()\r\n    );\r\n    if (\r\n      props.date.getDate() === today.getDate() &&\r\n      props.date.getMonth() === today.getMonth()\r\n    ) {\r\n      return;\r\n    }\r\n    setTimeSlice([...todaydateRef.current]);\r\n    clearInterval(interval);\r\n  };\r\n\r\n  const interval = () => {\r\n    setInterval(updateTimer, props.duration ? props.duration * 10000 : 100000);\r\n  };\r\n\r\n  const setDateForToday = () => {\r\n    if (todaydateRef.current === null) {\r\n      console.log(todaydateRef.current);\r\n      let setting = createSlice(today.getHours(), props.duration);\r\n      todaydateRef.current = setting;\r\n      interval();\r\n    }\r\n    setTimeSlice([...todaydateRef.current]);\r\n  };\r\n\r\n  const directSetDate = () => {\r\n    if (normalDateRef.current === null) {\r\n      let setting = createSlice(0, props.duration);\r\n      normalDateRef.current = setting;\r\n    }\r\n    setTimeSlice([...normalDateRef.current]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setShowConfirmButton();\r\n    props.date.getDate() === today.getDate() &&\r\n    props.date.getMonth() === today.getMonth()\r\n      ? setDateForToday()\r\n      : directSetDate();\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [props.date]);\r\n\r\n  const callSetTimeAndForward = (time) => {\r\n    setShowConfirmButton(`${time}:00`);\r\n  };\r\n\r\n  const navigateConfirmationPage = () => {\r\n    let updateDate = props.date\r\n      .toString()\r\n      .split(\" \")\r\n      .map((item, index, arr) => {\r\n        if (index !== 4) {\r\n          return item;\r\n        } else {\r\n          return (arr[4] = showConfirmButton);\r\n        }\r\n      })\r\n      .join(\" \");\r\n    props.update(updateDate);\r\n  };\r\n\r\n  return (\r\n    <div className=\"timeSliceBody\">\r\n      {timeSlice.map((item) => (\r\n        <div className=\"timeList\" key={item}>\r\n          <button\r\n            className={\r\n              showConfirmButton === `${item}:00` ? \"half marked\" : \"full\"\r\n            }\r\n            onClick={() => callSetTimeAndForward(item)}\r\n          >\r\n            {item}\r\n          </button>\r\n          {showConfirmButton === `${item}:00` ? (\r\n            <button className=\"half select\" onClick={navigateConfirmationPage}>\r\n              Confirm\r\n            </button>\r\n          ) : null}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeCard;"],"names":["props","_useState","useState","_useState2","_slicedToArray","timeSlice","setTimeSlice","todaydateRef","useRef","normalDateRef","today","Date","_useState3","_useState4","showConfirmButton","setShowConfirmButton","createSlice","start","duration","console","log","timeSliceData","i","sliceSize","j","iUpdate","concat","jUpdate","stitch","push","updateTimer","current","filter","item","split","getHours","date","getDate","getMonth","_toConsumableArray","clearInterval","interval","setInterval","useEffect","setting","setDateForToday","directSetDate","navigateConfirmationPage","updateDate","toString","map","index","arr","join","update","_jsx","className","children","_jsxs","onClick"],"sourceRoot":""}